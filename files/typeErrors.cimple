struct abc {int x; bool y; };
struct def {struct abc efg; int a; bool b;};
struct def hij; 
void main(){
    int a;
    bool b;
    a = 1;
    b = true;
    return;
}
int test1(){
    int x;
    x = 0;
    cout << x;
    cin >> x;
    cout << main; //Expected Error: Attempt to write a function
    cin >> main; //Expected Error: Attempt to read a function
    cout << main(); //Expected Error: Attempt to write void
    return x;
}
bool test2(){
    int x;
    x = test1();
    return; //Expected Error: Missing return value
    return x; //Expected Error: Bad return value
    return 0; //Expected Error: Bad return value
    return false;
}
void test3(){
    int x;
    x = test1();
    return x; //Expected Error: Return with a value in a void function
    return false; //Expected Error: Return with a value in a void function
}
void test4(int y){
    int x;
    x = 0;
    if (x){ //Expected Error: Non-bool expression used as an if condition
        return x; //Expected Error: Return with a value in a void function
    }
    if (0){ //Expected Error: Non-bool expression used as an if condition
    }
    else {
    }
    while(1 + 2){ //Expected Error: Non-bool expression used as a while condition
    }
}
void test5(){
    bool x;
    x = false;
    x(); //Expected Error: Attempt to call a non-function
    test3(x); //Expected Error: Function call with wrong number of args
    test4(x); //Expected Error: Type of actual does not match type of formal
    test4(1 > 2); //Expected Error: Type of actual does not match type of formal
}
void test6(){
    bool x;
    if (test5() == test3()){ //Expected Error: Equality operator applied to void functions
    }
    x = test5 != test4; //Expected Error: Equality operator applied to functions
}
void test7(){
    test6 = test5; //Expected Error: Function Assignment
}
void test8(){//Expected Errors : Arithmetic operator applied to non-numeric operand - 13
    int b;
    bool c;
    b = b + true; 
    b = false - b;
    b = c * false;
    b = 5 / c;
    b = def.efg + 5;
    b = abc - 6;
    b = test9() + 2;
    c++;
    c--;
    def.efg++;
    def.efg--;
    abc++;
    abc--;
}
void test9(){//Expected Errors : Relational operator applied to non-numeric operand - 6
    int b;
    bool c;
    c = c < 6;
    c = 5 > c;
    c = c >=c;
    c = 6 <= abc;
    c = def.efg < 5;
    c = test9() > 2; 
}
void test10(){//Expected Errors : Logical operator applied to non-bool operand - 6
    int b;
    bool c;
    c = !b;
    c = false && b;
    c = abc || false;
    c = def.efg && true;
    c = !test9();
    c = test9() || false;
}
void test11(){//Expected Errors : Non-bool expression used as an if condition - 5
    int b;
    bool c;
    if(b){}
    if(test9()){}
    if(def.efg){}
    if(abc){}
    if(5){}
}
void test12(){//Expected Errors : Non-bool expression used as a while condition - 5
    int b;
    bool c;
    while(b){}
    while(test9()){}
    while(def.efg){}
    while(abc){}
    while(5){}
}
void test13(){//Expected Errors : Type mismatch - 17
   int b;
   bool c;
   b = c;
   c = b;
   b = true;
   c = 5;
   b = test9();
   c = abc;
   b = def.efg;
   c = c == b;
   c = c == abc;
   c = c == def.efg;
   c = c == test9();
   c = b == abc;
   c = b == def.efg;
   c = b == test9();
   c = abc == def.efg;
   c = abc == test9();
   c = def.efg == test9();
}
void test14(){ //Number of Erorrs - 8
   cout << abc;  //Expected Errors : Attempt to write a struct name
   cout << def.efg;  //Expected Errors : Attempt to write a struct variable
   cin << abc; //Expected Errors : Attempt to read a struct name
   cin << def.efg; //Expected Errors : Attempt to read a struct variable
   bool b;
   b = abc == abc; //Expected Errors : Equality operator applied to struct names
   b = def.efg == def.efg; //Expected Errors : Equality operator applied to struct variables
   abc = abc;  //Expected Errors : Struct name assignment
   def.efg = def.efg;  //Expected Errors : Struct variable assignment
}
