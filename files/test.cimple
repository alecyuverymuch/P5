int a;
int b;
int c;
bool d;
bool e;
bool f;
struct G { int one; bool two; };
struct G g;
int func1(){
    return a;
}
bool func2(int x){
    return a > x;
}
// Tests read write operations
void test1(){
    int x;
    x = 0;
    cout << x;
    cout << func1();
    cout << func2(x);
    cin >> x;
}
// Tests logical operators and conditions
void test2(){
    bool x;
    bool y;
    bool z;
    z = true;
    z = false;
    z = x || func2(2);
    z = x && y;
    z = x && y || z;
    z = !x;
    z = !x || y;
    z = !(x || (y && z));
    x = false;
    y = !x;
    d = x || y && !func2(a);
    e = (5 > 2) || (-func1() <= 2) && !(-3 == 2);
    if (!d || !(func2(a) && !e)){
        f = x && !y || (1 < func1());
    }
    while (((5 + 2) > -func1()) || !((2 - 3) == 4)){
        x = y || (!x && func2(a)) || (2 > func1() + 2);
    }
}
// Tests arithmatic operators
void test3(){
    int x;
    int y; 
    int z;
    y = 1;
    z = 2;
    x++;
    x--;
    x = 4 + 4;
    x = 4 * 4;
    x = 4 - 4;
    x = 4 / 4;
    x = y;
    y = -x;
    x = x + func1() * z - 2 * 4;
    x = (x + y) * ((-func1()- 2) - (2 * 4));
    if (x > func1()){
        z = (z + 4) - ((25 * func1() + 2) / 2);
    }
    while (z <= (x + 3)){
        y = 2 + 3 - 4 * 5 / 6;
    }
}
// Tests relational operations
void test4(){
    bool x;
    bool y;
    bool z;
    x = a > b;
    y = a < b;
    x = a >= b;
    y = a <= b;
    x = (a > func1()) || (a <= c);
    x = a > b && a > b || -func1() < b;
    z = !(a + 2 > 0 || b <= z* 4 && c < 2 + 2 || !func2(a));
    if (5 > 3){
        x = func1() <= 3 || a + b + c >= 0;
    }
    while(func2(a) || (a >= b + func1())){
        y = 3 > 0 || 2000 <= -func1();
    }
}